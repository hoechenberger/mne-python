[project]
name = "mne"
description = "MNE-Python project for MEG and EEG data analysis."
authors = [
    { name = "Alexandre Gramfort", email = "alexandre.gramfort@inria.fr" },
]
maintainers = [{ name = "Dan McCloy", email = "dan@mccloy.info" }]
dynamic = ["version"]
license = { text = "BSD-3-Clause" }
readme = { file = "README.rst", content-type = "text/x-rst" }
requires-python = ">=3.8"
keywords = [
    "neuroscience",
    "neuroimaging",
    "MEG",
    "EEG",
    "ECoG",
    "fNIRS",
    "brain",
]
classifiers = [
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved",
    "Programming Language :: Python",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
]
scripts = { mne = "mne.commands.utils:main" }
dependencies = [
    "numpy>=1.21.2",
    "scipy>=1.7.1",
    "matplotlib>=3.5.0",
    "tqdm",
    "pooch>=1.5",
    "decorator",
    "packaging",
    "jinja2",
    "importlib_resources>=5.10.2; python_version<'3.9'",
    "lazy_loader>=0.3",
    "defusedxml",
]

[project.optional-dependencies]
# here for backward-compat
data = []

# requirements for MNE-Python functions that use HDF5 I/O
hdf5 = ["h5io", "pymatreader"]

# requirements for full MNE-Python functionality (other than raw/epochs export)
full = [
    "mne[data]",
    "mne[hdf5]",
    "qtpy",
    "PyQt6",
    "pyobjc-framework-Cocoa>=5.2.0; platform_system=='Darwin'",
    "sip",
    "scikit-learn",
    "nibabel",
    "openmeeg>=2.5.5",
    "numba",
    "h5py",
    "pandas",
    "numexpr",
    "jupyter",
    "python-picard",
    "statsmodels",
    "joblib",
    "psutil",
    "dipy",
    "vtk",
    "nilearn",
    "xlrd",
    "imageio>=2.6.1",
    "imageio-ffmpeg>=0.4.1",
    "traitlets",
    "pyvista>=0.32,!=0.35.2,!=0.38.0,!=0.38.1,!=0.38.2,!=0.38.3,!=0.38.4,!=0.38.5,!=0.38.6,!=0.42.0",
    "pyvistaqt>=0.4",
    "mffpy>=0.5.7",
    "ipywidgets",
    "ipympl",
    "ipyevents",
    "trame",
    "trame-vtk",
    "trame-vuetify",
    "mne-qt-browser",
    "darkdetect",
    "qdarkstyle",
    "threadpoolctl",
]

[project.urls]
Homepage = "https://mne.tools/"
Download = "https://pypi.org/project/scikit-learn/#files"
"Bug Tracker" = "https://github.com/mne-tools/mne-python/issues/"
Documentation = "https://mne.tools/"
Forum = "https://mne.discourse.group/"
"Source Code" = "https://github.com/mne-tools/mne-python/"

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch]
version.source = "vcs"
version.raw-options = { version_scheme = "release-branch-semver" }
build.hooks.vcs.version-file = "mne/_version.py"
build.exclude = ["/.*", "/*.yml", "/*.yaml", "/*.toml", "/*.txt"]

[tool.codespell]
ignore-words = "ignore_words.txt"
builtin = "clear,rare,informal,names,usage"
skip = "doc/references.bib"

[tool.ruff]
select = ["E", "F", "W", "D", "I"]
exclude = ["__init__.py", "constants.py", "resources.py"]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D413", # Missing blank line after last section
]

[tool.ruff.pydocstyle]
convention = "numpy"
ignore-decorators = [
    "property",
    "setter",
    "mne.utils.copy_function_doc_to_method_doc",
    "mne.utils.copy_doc",
    "mne.utils.deprecated",
]

[tool.ruff.per-file-ignores]
"tutorials/time-freq/10_spectrum_class.py" = [
    "E501", # line too long
]
"mne/datasets/*/*.py" = [
    "D103", # Missing docstring in public function
]
"mne/utils/tests/test_docs.py" = [
    "D101", # Missing docstring in public class
    "D410", # Missing blank line after section
    "D411", # Missing blank line before section
    "D414", # Section has no content
]
"examples/*/*.py" = [
    "D205", # 1 blank line required between summary line and description
]

[tool.pytest.ini_options]
addopts = """--durations=20 --doctest-modules -ra --cov-report= --tb=short \
    --doctest-ignore-import-errors --junit-xml=junit-results.xml \
    --ignore=doc --ignore=logo --ignore=examples --ignore=tutorials \
    --ignore=mne/gui/_*.py --ignore=mne/icons --ignore=tools \
    --ignore=mne/report/js_and_css \
    --color=yes --capture=sys"""
junit_family = "xunit2"

[tool.black]
exclude = "(dist/)|(build/)|(.*\\.ipynb)"

[tool.bandit.assert_used]
skips = ["*/test_*.py"] # assert statements are good practice with pytest

[tool.rstcheck]
report_level = "WARNING"
ignore_roles = [
    "func", "class", "term", "ref", "doc", "gh", "file", "samp", "meth", "mod", "kbd",
    "newcontrib", "footcite", "footcite:t", "eq", "py:mod", "attr", "py:class", "exc",
]
ignore_directives = [
    "rst-class", "tab-set", "grid", "toctree", "footbibliography", "autosummary",
    "currentmodule", "automodule", "cssclass", "tabularcolumns", "minigallery",
    "autoclass", "highlight", "dropdown", "graphviz", "glossary", "autofunction",
    "bibliography",
]
ignore_messages = "^.*(Unknown target name|Undefined substitution referenced)[^`]*$"
